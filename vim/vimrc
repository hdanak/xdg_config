
nmap j gj
nmap k gk

nmap <C-h> gT
nmap <C-l> gt
nmap <C-j> <C-d>
nmap <C-k> <C-u>

nmap <Esc>j <C-e>
nmap <Esc>k <C-y>

nmap <Esc>OD gT
nmap <Esc>OC gt
nmap <Esc>OB <C-e>
nmap <Esc>OA <C-y>

imap <S-tab> <C-o><<

" Perl utility functions
perl << EOF
## Misc Util Functions
    sub say {
        VIM::Msg(join '', @_)
    }
## Variable Access
    sub VIM_variable {
        while ( ($type, $prefix) = each %_ ) {
            *{$type} = sub { map { VIM::Eval( $prefix . $_ ) } @_ }
        }
    }
    VIM_variable var => 'l:', opt => '&', reg => '@', env => '$';

## Vim Command Translations
    sub VIM_translate {
        map {
            if ('ARRAY' eq ref) {
                '[' . join(',', VIM_translate(@$_)) . ']'
            } else { "$_" }
        } @_
    }
    sub VIM_native {
        for my $cmd (@_) {
            *{$cmd} = sub { VIM::Eval( "$cmd(" . VIM_translate(@_) . ')' ) }
        }
    }
    VIM_native 'col', 'line', 'virtcol', 'echo';
EOF

let $PAGER=''

runtime ftplugin/man.vim
nmap K :Man <cword><CR>

set foldmethod=indent
set foldminlines=3

function! FoldText()
  let foldline = matchstr(getline(v:foldstart), '^\s*\zs.*\ze$') . ' '
  let nextline = getline(nextnonblank(v:foldstart + 1))
  if foldline =~ '^\s*"""'
    let foldline = foldline . matchstr(nextline, '^\s*\zs.*\ze$')
  elseif foldline =~ '^\s\+"[^"]\+"$'
    let foldline = foldline . matchstr(nextline, '"\zs.*\ze"')
  endif
  let size = 1 + v:foldend - v:foldstart
  return "+ " . size . " lines:  " . foldline
endfunction
set foldtext=FoldText()

set foldlevelstart=1

set formatoptions=croqln1 "a -- makes it reflow comments
let &showbreak=repeat(' ', winwidth(0)/3) . ' ..'
set linebreak

nmap Q gq}<C-o>
nmap S :w<CR>

set spell
set hlsearch
nnoremap <silent> <ESC> :nohl<CR>

hi SpellBad cterm=underline ctermfg=red ctermbg=black
hi SpellCap cterm=underline ctermfg=cyan ctermbg=black
hi Search cterm=bold ctermfg=darkblue ctermbg=grey
hi Folded	ctermfg=grey ctermbg=NONE
hi FoldColumn	ctermfg=grey ctermbg=NONE
hi VertSplit ctermbg=grey ctermfg=black
hi StatusLine cterm=bold ctermbg=grey ctermfg=darkgrey
hi StatusLineNC cterm=NONE ctermbg=grey ctermfg=grey
hi ExtraWhitespace ctermbg=red
"hi ExtraWhitespace ctermbg=darkgreen
match ExtraWhitespace /\s\+$\| \+\ze\t/


set background=dark
set ts=4 sts=4 sw=4 et
filetype plugin indent on
syntax on
set nomodeline

noremap <silent> <Leader>vs :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>
